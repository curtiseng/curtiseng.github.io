<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LAMBDA on 往事随风的博客</title>
    <link>https://fallingyang.github.io/tags/LAMBDA/</link>
    <description>Recent content in LAMBDA on 往事随风的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 23 May 2018 10:50:29 +0000</lastBuildDate>
    
	<atom:link href="https://fallingyang.github.io/tags/LAMBDA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java8中Lambda表达式</title>
      <link>https://fallingyang.github.io/posts/Java8%E4%B8%ADLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 23 May 2018 10:50:29 +0000</pubDate>
      
      <guid>https://fallingyang.github.io/posts/Java8%E4%B8%ADLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>1. 什么是Lambda(λ)表达式 在数学运算和一般计算中，lambda表达式是一个函数：对于某些输入值或者所有的输入值，有确定的输出值。java使用lambda表达式为自己引入了函数(java只支持方法)。使用传统的java术语解释，lambda可以被理解为具有更简洁语法的匿名方法，这个匿名方法可以省略修饰符，返回类型，某些情况下，参数类型也可以省略。
 lambda语法
(parameters) -&amp;gt; expression (parameters) -&amp;gt; { statements; }  例子
// 输入两个整数，返回他们的和 1. (int x, int y) -&amp;gt; x + y // 输入两个值，返回他们的差 2. (x, y) -&amp;gt; x - y // 没有输入，返回42 3. () -&amp;gt; 42 // 输入一个字符串，打印他到控制台，返回为空 4. (String s) -&amp;gt; System.out.println(s) // 输入一个值，返回doubling x 5. x -&amp;gt; 2 * x // 输入一个collection，清空他，并返回清空前的size 6. c -&amp;gt; { int s = c.size(); c.clear(); return s; }  语法说明</description>
    </item>
    
  </channel>
</rss>