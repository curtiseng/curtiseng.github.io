<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HYSTRIX on 往事随风的博客</title>
    <link>https://fallingyang.github.io/tags/HYSTRIX/</link>
    <description>Recent content in HYSTRIX on 往事随风的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 15 May 2018 10:20:50 +0000</lastBuildDate>
    
	<atom:link href="https://fallingyang.github.io/tags/HYSTRIX/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hystrix实现熔断与服务降级</title>
      <link>https://fallingyang.github.io/posts/Hystrix%E5%AE%9E%E7%8E%B0%E7%86%94%E6%96%AD%E4%B8%8E%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/</link>
      <pubDate>Tue, 15 May 2018 10:20:50 +0000</pubDate>
      
      <guid>https://fallingyang.github.io/posts/Hystrix%E5%AE%9E%E7%8E%B0%E7%86%94%E6%96%AD%E4%B8%8E%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/</guid>
      <description>  Hystrix使用命令模式与线程池（或者信号量）实现了断路器、线程隔离和服务降级，提高了服务容错能力。
 一、可用降级场景  超时降级 故障降级 读服务降级 写服务降级 多级降级 密集数据流错误备份降级 人工降级（使用配置文件）  二、Hystrix触发降级的4种情况  run()方法抛出非HystrixBadRequestException异常 run()方法调用超时 线程池/队列/信号量跑满 熔断器开启拦截调用  三、熔断包装与执行方式（?）  同步 异步 响应式 spring-hystrix  四、熔断打开/恢复条件  请求总数（QPS）超过线程池预设总数 错误百分比超过阀值范围 满足上面两个条件断路器处于打开状态  五、其他能力  线程池分组命名 请求缓存 请求合并 定制触发异常 全局配置与局部配置 监控分析  ####六、feign-hystrix
七、zuul-hystrix 八、常用配置 九、Hystrix原理 </description>
    </item>
    
  </channel>
</rss>