<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并发 on 往事随风的博客</title>
    <link>https://fallingyang.github.io/tags/%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 并发 on 往事随风的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 10 May 2019 11:30:50 +0000</lastBuildDate>
    
	<atom:link href="https://fallingyang.github.io/tags/%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>并发编程</title>
      <link>https://fallingyang.github.io/posts/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 10 May 2019 11:30:50 +0000</pubDate>
      
      <guid>https://fallingyang.github.io/posts/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
      <description> 思想  分工  Java语言提供的Executor、Fork/Join、Future等 Go语言提供的go关键字 生产者-消费者 Thread-Per-Message Worker Thread  同步(协作)  管程模型 Java语言提供的Executor、Fork/Join、Future分工方法也解决线程协作的问题，Java语言特有的CountDownLatch、CyclicBarrier、Phaser、Exchanger等，这些底层都是使用管程模型 Go语言  互斥  可见性与有序性的内存模型来确保同一时刻，只允许一个线程访问共享变量，也叫互斥 语言同步关键字、各种Lock、不共享变量、变量只读、Copy-on-write模式 Java中的synchronized关键字，SDK中的Lock，ThreadLocal，final关键字   术语  并发与并行  并发属于代码；并行属于一个运行中的程序。并发是相对于一个代码上下文的。
 原子上下文：进程上下文，操作系统上下文，硬件上下文，goroutine上下文
 原子性：不可分割(indivisible)和不可中断(uninterruptible)
 可见性
 有序性
 竞争条件：当两个或多个操作必须按正确的顺序执行，而程序未保证这个顺序，就会发生竞争。
 临界区(critical section)：程序中需要独占访问共享资源的部分
 并发安全
 死锁、活锁、饥饿
 内存模型
 内存访问同步
 CSP
  </description>
    </item>
    
  </channel>
</rss>